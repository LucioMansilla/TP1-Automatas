--- Test AFND to AFD ---
Original Automata(AFND): 
-------Automata-------
K: 2->1->0->NULL
Alphabet: 1->0->NULL
Delta: 
From 0 with 0 to 2->1->NULL
From 0 with J to 1->NULL
From 1 with 1 to 2->NULL
Initial state: 0
Final states: 2->NULL
---------------------
Transformed Automata(AFD): 
-------Automata-------
K: 3->2->1->0->NULL
Alphabet: 1->0->NULL
Delta: 
From 0 with 0 to 2->NULL
From 0 with 1 to 1->NULL
From 1 with 0 to 1->NULL
From 1 with 1 to 1->NULL
From 2 with 0 to 1->NULL
From 2 with 1 to 3->NULL
From 3 with 0 to 1->NULL
From 3 with 1 to 1->NULL
Initial state: 0
Final states: 2->3->NULL
---------------------

--- Test AFND to AFD Passed ---
--- Test Build ---
Automata: 
-------Automata-------
K: 2->1->0->NULL
Alphabet: 1->0->NULL
Delta: 
From 0 with 0 to 2->1->NULL
From 0 with J to 1->NULL
From 1 with 1 to 2->NULL
Initial state: 0
Final states: 2->NULL
---------------------

--- Test Build Passed ---
--- Test Build from DOT ---
-------Automata-------
K: 0->1->3->2->5->4->NULL
Alphabet: a->c->b->NULL
Delta: 
From 0 with _ to 3->NULL
From 0 with a to 1->NULL
From 1 with c to 2->NULL
From 2 with _ to 5->NULL
From 3 with b to 4->5->NULL
From 4 with b to 4->5->NULL
From 5 with _ to 0->NULL
Initial state: 0
Final states: 5->4->NULL
---------------------

--- Test Build from dot Passed ---

--- Test Belongs ---
-------Automata-------
K: 2->1->0->NULL
Alphabet: 1->0->NULL
Delta: 
From 0 with 0 to 2->1->NULL
From 0 with _ to 1->NULL
From 1 with 1 to 2->NULL
From 2 with 0 to 2->NULL
From 2 with 1 to 2->NULL
Initial state: 0
Final states: 2->NULL
---------------------
Test case 01 passed
Test case 01111 passed
Test case 010101 passed

--- All belongs tests cases passed ---

--- Test STRING BELONGS ---
-------Automata-------
K: 2->1->0->NULL
Alphabet: 1->0->NULL
Delta: 
From 0 with _ to 1->NULL
From 0 with a to 2->1->NULL
From 1 with b to 2->NULL
From 2 with a to 2->NULL
From 2 with b to 2->NULL
Initial state: 0
Final states: 2->NULL
---------------------
Test case ab passed
Test case abbbb passed
Test case ababab passed

--- All string belongs tests cases passed ---
--- Test Read and Write ---
-------Automata-------
K: 0->1->3->2->5->4->NULL
Alphabet: a->c->b->NULL
Delta: 
From 0 with _ to 3->NULL
From 0 with a to 1->NULL
From 1 with c to 2->NULL
From 2 with _ to 5->NULL
From 3 with b to 4->5->NULL
From 4 with b to 4->5->NULL
From 5 with _ to 0->NULL
Initial state: 0
Final states: 5->4->NULL
---------------------

--- Test Read and Write Passed ---
--- Test Union ---
Union: 
-------Automata-------
K: ;->:->9->8->7->6->5->4->3->2->1->0->NULL
Alphabet: 1->0->NULL
Delta: 
From 0 with _ to 6->1->NULL
From 1 with 0 to 2->NULL
From 2 with 1 to 3->NULL
From 3 with 0 to 4->NULL
From 4 with 1 to 5->NULL
From 4 with _ to ;->NULL
From 5 with 0 to 4->NULL
From 6 with 0 to 7->NULL
From 7 with 1 to 8->NULL
From 8 with 0 to 9->NULL
From 9 with 1 to :->NULL
From 9 with _ to ;->NULL
From 10 with 0 to 9->NULL
Initial state: 0
Final states: ;->NULL
---------------------

--- Test Union Passed ---
--- Test Kleene ---
Kleene: 
-------Automata-------
K: 6->5->4->3->2->1->0->NULL
Alphabet: 0->1->NULL
Delta: 
From 0 with _ to 6->1->NULL
From 1 with 0 to 2->NULL
From 2 with 1 to 3->NULL
From 3 with 0 to 4->NULL
From 4 with 1 to 5->NULL
From 4 with _ to 6->1->NULL
From 5 with 0 to 4->NULL
Initial state: 0
Final states: 6->NULL
---------------------

--- Test Kleene Passed ---
 -- Test TP1 -- 
Original automata:-------Automata-------
K: 0->1->2->3->NULL
Alphabet: a->b->NULL
Delta: 
From 0 with a to 1->NULL
From 1 with a to 3->NULL
From 1 with b to 2->1->NULL
From 3 with a to 3->NULL
From 3 with b to 3->NULL
Initial state: 0
Final states: 2->NULL
---------------------
The conversion from AFND to AFD has been completed.
You can view the result in the file AFD_TP.dot
belongs: 0
 -- Test TP1 passed -- 
 -- Test TP2 -- 
Kleene: 
Union: 
Minimize: 
 -- Test TP2 passed -- 
--- Test Minimize: ---
Minimize: 
-------Automata-------
K: 4->3->2->1->0->NULL
Alphabet: 0->1->NULL
Delta: 
From 0 with 0 to 4->NULL
From 0 with 1 to 1->NULL
From 1 with 0 to 1->NULL
From 1 with 1 to 1->NULL
From 2 with 0 to 3->NULL
From 2 with 1 to 1->NULL
From 3 with 0 to 1->NULL
From 3 with 1 to 0->NULL
From 4 with 0 to 1->NULL
From 4 with 1 to 0->NULL
Initial state: 2
Final states: 4->NULL
---------------------
Test Minimize Passed
--- Test Parser ---
Test 1
-------Automata-------
K: ;->:->9->8->7->6->5->4->3->2->1->0->NULL
Alphabet: a->c->b->NULL
Delta: 
From 0 with _ to 5->1->NULL
From 1 with b to 2->NULL
From 2 with _ to 3->NULL
From 3 with c to 4->NULL
From 4 with _ to ;->NULL
From 5 with _ to :->6->NULL
From 6 with a to 7->NULL
From 7 with _ to 8->NULL
From 8 with b to 9->NULL
From 9 with _ to :->6->NULL
From 10 with _ to ;->NULL
Initial state: 0
Final states: ;->NULL
---------------------

Test 2
-------Automata-------
K: 5->4->3->2->1->0->NULL
Alphabet: a->b->c->NULL
Delta: 
From 0 with a to 1->NULL
From 1 with _ to 2->NULL
From 2 with b to 3->NULL
From 3 with _ to 4->NULL
From 4 with c to 5->NULL
Initial state: 0
Final states: 5->NULL
---------------------

Test 3
-------Automata-------
K: 5->4->3->2->1->0->NULL
Alphabet: b->a->NULL
Delta: 
From 0 with _ to 3->1->NULL
From 1 with a to 2->NULL
From 2 with _ to 5->NULL
From 3 with b to 4->NULL
From 4 with _ to 5->NULL
Initial state: 0
Final states: 5->NULL
---------------------

Test 4
-------Automata-------
K: 3->2->1->0->NULL
Alphabet: a->NULL
Delta: 
From 0 with _ to 3->1->NULL
From 1 with a to 2->NULL
From 2 with _ to 3->1->NULL
Initial state: 0
Final states: 3->NULL
---------------------

Test 5
-------Automata-------
K: 5->4->3->2->1->0->NULL
Alphabet: a->b->NULL
Delta: 
From 0 with _ to 5->1->NULL
From 1 with a to 2->NULL
From 2 with _ to 3->NULL
From 3 with b to 4->NULL
From 4 with _ to 5->1->NULL
Initial state: 0
Final states: 5->NULL
---------------------

Test 6
-------Automata-------
K: 7->6->5->4->3->2->1->0->NULL
Alphabet: b->a->NULL
Delta: 
From 0 with _ to 7->1->NULL
From 1 with _ to 4->2->NULL
From 2 with a to 3->NULL
From 3 with _ to 6->NULL
From 4 with b to 5->NULL
From 5 with _ to 6->NULL
From 6 with _ to 7->1->NULL
Initial state: 0
Final states: 7->NULL
---------------------

Test 7
-------Automata-------
K: 9->8->7->6->5->4->3->2->1->0->NULL
Alphabet: b->a->NULL
Delta: 
From 0 with _ to 5->1->NULL
From 1 with _ to 4->2->NULL
From 2 with a to 3->NULL
From 3 with _ to 4->2->NULL
From 4 with _ to 9->NULL
From 5 with _ to 8->6->NULL
From 6 with b to 7->NULL
From 7 with _ to 8->6->NULL
From 8 with _ to 9->NULL
Initial state: 0
Final states: 9->NULL
---------------------

Test 8
-------Automata-------
K: 7->6->5->4->3->2->1->0->NULL
Alphabet: b->a->c->NULL
Delta: 
From 0 with _ to 3->1->NULL
From 1 with c to 2->NULL
From 2 with _ to 7->NULL
From 3 with a to 4->NULL
From 4 with _ to 5->NULL
From 5 with b to 6->NULL
From 6 with _ to 7->NULL
Initial state: 0
Final states: 7->NULL
---------------------

Test 9
-------Automata-------
K: 7->6->5->4->3->2->1->0->NULL
Alphabet: c->b->a->NULL
Delta: 
From 0 with _ to 3->1->NULL
From 1 with a to 2->NULL
From 2 with _ to 7->NULL
From 3 with b to 4->NULL
From 4 with _ to 5->NULL
From 5 with c to 6->NULL
From 6 with _ to 7->NULL
Initial state: 0
Final states: 7->NULL
---------------------

Test 10
-------Automata-------
K: 7->6->5->4->3->2->1->0->NULL
Alphabet: b->a->c->NULL
Delta: 
From 0 with _ to 3->1->NULL
From 1 with c to 2->NULL
From 2 with _ to 7->NULL
From 3 with a to 4->NULL
From 4 with _ to 5->NULL
From 5 with b to 6->NULL
From 6 with _ to 7->NULL
Initial state: 0
Final states: 7->NULL
---------------------


--- Test Parser Passed ---
--- Test Mini-Grep ---
Test 1 = expr: a.b*, line: ab, expected: true 
PASSED
Test 2 = expr: a.b*, line: abb, expected: true 
PASSED
Test 3 = expr: a.b*, line: abbb, expected: true 
PASSED
Test 4 = expr: a.b*, line: bbb, expected: false 
PASSED
Test 5 = expr: a.b*, line: ac, expected: true 
PASSED
Test 6 = expr: (a.b)*, line: abab, expected: true 
PASSED
Test 7 = expr: (a.b)*, line: babbc, expected: true 
PASSED
Test 8 = expr: (a.b)*, line: aba, expected: true 
PASSED
Test 9 = expr: (a|b)*, line: a, expected: true 
PASSED
Test 10 = expr: (a|b)*, line: b, expected: true 
PASSED
Test 11 = expr: (a|b)*, line: c, expected: false 
PASSED
Test 12 = expr: a*, line: aaaa, expected: true 
PASSED
Test 13 = expr: a*, line: b, expected: false 
PASSED

--- Test Mini-Grep Passed ---
